"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession","predict","GLM")
summarize <- function(data_dir = NULL, ssheet=NULL,id_colname=NULL, housekeep="", norm="GEO"){
require(reshape2)
locations <- list.files(data_dir, pattern=".RCC",recursive = T)
housekeep <- paste(housekeep,collapse = "@")
ssheet_df <- load.samplesheet(ssheet)
accession <- ssheet_df[,id_colname]
location_match <- sapply(accession, function(y) locations[grep(y,locations)])
names(location_match) <- accession
location_match <- Filter(length,location_match)
accession <- names(location_match)
if(length(locations) > length(accession)){
warning("djdjdjd")
}
path_to_files <- paste(data_dir,location_match[accession],sep="/")
rcc_content <- lapply(path_to_files, rcc.read)
counts <- lapply(rcc_content, extract_counts)
names(counts) <- accession
counts <- do.call(cbind,counts)
control_genes <- lapply(rcc_content, control_genes, housekeep)
names(control_genes) <- accession
control_genes <- melt(control_genes,
id.vars=c("CodeClass","Name","Accession","Count"))
exc_probes <- probe.exclusion(control_genes)
sspe_probes <- sample.specific.probe.exclusion(control_genes)
sspe_names <- colnames(sspe_probes)
sspe_probes <- setNames(split(sspe_probes, seq(nrow(sspe_probes))), rownames(sspe_probes))
sspe_probes <- lapply(sspe_probes,function(x){
names(x) <- sspe_names
x
})
if(housekeep == "predict"){
temp_facs <- factor_calculation(rcc_content,housekeep,norm, exc_probes,sspe_probes)
rownames(temp_facs) <- accession
tmp_counts <- lapply(colnames(counts), function(x) {
local <- counts[,x] - temp_facs[x,"Negative_factor"]
local <- counts[,x] * temp_facs[x,"Positive_factor"]
local[local <= 0] <- 0.1
local <- round(local)
local
})
names(tmp_counts) <- accession
tmp_counts<- do.call(cbind,tmp_counts)
predicted_housekeeping <<- predict.housekeeping(tmp_counts)
housekeep <- paste(predicted_housekeeping,collapse = "@")
control_genes <- lapply(rcc_content, control_genes, housekeep)
names(control_genes) <- accession
control_genes <- melt(control_genes,
id.vars=c("CodeClass","Name","Accession","Count"))
}
qc_values <- lapply(rcc_content, qc_features)
qc_values <- do.call(rbind, qc_values)
qc_values <- as.data.frame(qc_values, stringsAsFactors=F)
norm_factor <- factor_calculation(rcc_content,housekeep,norm, exc_probes, sspe_probes)
rownames(norm_factor) <- accession
pcas <- prinicipal_components(counts)
rownames(qc_values) <- accession
rownames(ssheet_df) <- accession
summar <- list("features" = qc_values,
"ssheet" = ssheet_df,
"pc" = pcas[[1]],
"pcsum" = pcas[[2]],
"norm_facs" = norm_factor,
"control" = control_genes,
"counts" = counts,
"path" = data_dir,
"access" = id_colname,
"locations" = location_match,
"housekeep" = housekeep)
return(summar)
}
test <- summarize("C:/Users/gbouland/Desktop/Data_test",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession","predict","GLM")
test <- summarize("Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession","predict","GLM")
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
print(sspe)
probes_out <- c("POS_F(0.125)", exc_negs, names(sspe))
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
test <- summarize("C:/Users/gbouland/Desktop/Data_test",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession","predict","GLM")
c(character(0),character(0))
c(character(0),character(0),"d")
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
probes_out <- c("POS_F(0.125)", exc_negs, names(sspe))
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
probes_out <- c("POS_F(0.125)", exc_negs,sspe)
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
test <- summarize("Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession","predict","GLM")
visualize(test)
visualize(test)
my_housekeep <- c("hsa-miR-491-5p|0","hsa-miR-1910-5p|0","hsa-miR-514a-5p|0")
test <- summarize("Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession",my_housekeep,"GLM")
visualize(test)
normalize <- function(summary, housekeep="", remove.outliers=T, norm="GEO"){
if(remove.outliers){
housekeep <- paste(housekeep,collapse = "@")
ssheet_df <- remove.outliers(summary)
accession <- ssheet_df[,summary[["access"]]]
path <- summary[["path"]]
location_match <- summary[["locations"]]
path_to_files <- paste(path,location_match[accession],sep="/")
rcc_content <- lapply(path_to_files, rcc.read)
control_genes <- lapply(rcc_content, control_genes, housekeep)
names(control_genes) <- accession
control_genes <- melt(control_genes,
id.vars=c("CodeClass","Name","Accession","Count"))
exc_probes <- probe.exclusion(control_genes)
sspe_probes <- sample.specific.probe.exclusion(control_genes)
sspe_names <- colnames(sspe_probes)
sspe_probes <- setNames(split(sspe_probes, seq(nrow(sspe_probes))), rownames(sspe_probes))
sspe_probes <- lapply(sspe_probes,function(x){
names(x) <- sspe_names
x
})
norm_factor <- factor_calculation(rcc_content, housekeep = housekeep, norm, exc_probes,sspe_probes)
rownames(norm_factor) <- accession
counts <- lapply(rcc_content, extract_counts)
counts <- do.call(cbind,counts)
colnames(counts) <- accession
raw_counts <- counts
}else{
norm_factor <- summary[["norm_facs"]]
counts <- summary[["counts"]]
}
counts <- sapply(colnames(counts), function(x) {
local <- counts[,x] - norm_factor[x,"Negative_factor"]
local
})
counts <- lapply(colnames(counts), function(x){
local <- counts[,x] * norm_factor[x,"Positive_factor"] * norm_factor[x,"House_factor"]
local[local <= 0] <- 0.1
local <- round(local)
local
})
names(counts) <- accession
counts <-do.call(cbind.data.frame, counts)
output <- list("counts" = raw_counts,
"scaling" = norm_factor,
"normalized" = counts)
return(output)
}
normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
norms <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
norms$counts
dim(norms$counts)
norms$scaling
normal <- norms$normalized
sprednorm <- stack(as.data.frame(normal))
sprednorm$values <- ifelse(sprednorm$values == 0, NA, sprednorm$values)
ssheet <- test$ssheet
sprednorm$date <- sapply(sprednorm$ind, function(x) ssheet[ssheet$Accession == as.character(x),"date"])
sprednorm.dens.plot <- ggplot(sprednorm, aes(x =log10(sprednorm[,"values"]+1))) +
stat_density(aes(group = ind, color = as.factor(date)),position="identity",geom="line") + labs(x="Log10(counts)",color="Date")
sprednorm.dens.plot
ggplot(sprednorm, aes(x = sprednorm2[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges() +facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
library(ggridges)
ggplot(sprednorm, aes(x = sprednorm2[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges() +facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges() +facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
0.5^8
0.5^10
*100
(0.5^10) * 100
?mapply
mapply(rep, times = 1:4, MoreArgs = list(x = 42))
factor_calculation <- function(rcc_content, housekeep, norm, ex_negs,sspe_negs){
if(norm == "GEO"){
geometric_mean_pos <- sapply(rcc_content, geometric, "Positive")
geometric_mean_neg <- sapply(rcc_content, geometric, "Negative")
positive_factor <- sapply(geometric_mean_pos,
function(x) mean(geometric_mean_pos) / x)
}else if(norm == "GLM"){
#glms <- sapply(rcc_content, intercept_slope, ex_negs)
glms<- mapply(intercept_slope, rcc_content, sspe_negs, MoreArgs = ex_negs)
geometric_mean_neg <- glms["intercept",]
slopes <- glms["slope",]
positive_factor <- sapply(slopes,
function(x) mean(slopes) / x)
}
if(housekeep == "predict"){
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg)
}else{
housecounts <- mapply(housekeeping,rcc_content, positive_factor,
geometric_mean_neg, housekeep)
housecounts <- as.data.frame(housecounts)
geometric_mean_house <- sapply(housecounts,
function(x) geoMean(x))
house_factor <- sapply(geometric_mean_house,
function(x) mean(geometric_mean_house) / x)
house_factor <- unname(house_factor)
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg,
"House_factor" = house_factor)
}
return(norm_factor)
}
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
factor_calculation <- function(rcc_content, housekeep, norm, ex_negs,sspe_negs){
if(norm == "GEO"){
geometric_mean_pos <- sapply(rcc_content, geometric, "Positive")
geometric_mean_neg <- sapply(rcc_content, geometric, "Negative")
positive_factor <- sapply(geometric_mean_pos,
function(x) mean(geometric_mean_pos) / x)
}else if(norm == "GLM"){
#glms <- sapply(rcc_content, intercept_slope, ex_negs)
print(ex_negs)
glms<- mapply(intercept_slope, rcc_content, sspe_negs, ex_negs)
geometric_mean_neg <- glms["intercept",]
slopes <- glms["slope",]
positive_factor <- sapply(slopes,
function(x) mean(slopes) / x)
}
if(housekeep == "predict"){
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg)
}else{
housecounts <- mapply(housekeeping,rcc_content, positive_factor,
geometric_mean_neg, housekeep)
housecounts <- as.data.frame(housecounts)
geometric_mean_house <- sapply(housecounts,
function(x) geoMean(x))
house_factor <- sapply(geometric_mean_house,
function(x) mean(geometric_mean_house) / x)
house_factor <- unname(house_factor)
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg,
"House_factor" = house_factor)
}
return(norm_factor)
}
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
factor_calculation <- function(rcc_content, housekeep, norm, ex_negs,sspe_negs){
if(norm == "GEO"){
geometric_mean_pos <- sapply(rcc_content, geometric, "Positive")
geometric_mean_neg <- sapply(rcc_content, geometric, "Negative")
positive_factor <- sapply(geometric_mean_pos,
function(x) mean(geometric_mean_pos) / x)
}else if(norm == "GLM"){
#glms <- sapply(rcc_content, intercept_slope, ex_negs)
print(ex_negs)
print(length(rcc_content))
print(length(sspe_negs))
glms<- mapply(intercept_slope, rcc_content, sspe_negs, ex_negs)
geometric_mean_neg <- glms["intercept",]
slopes <- glms["slope",]
positive_factor <- sapply(slopes,
function(x) mean(slopes) / x)
}
if(housekeep == "predict"){
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg)
}else{
housecounts <- mapply(housekeeping,rcc_content, positive_factor,
geometric_mean_neg, housekeep)
housecounts <- as.data.frame(housecounts)
geometric_mean_house <- sapply(housecounts,
function(x) geoMean(x))
house_factor <- sapply(geometric_mean_house,
function(x) mean(geometric_mean_house) / x)
house_factor <- unname(house_factor)
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg,
"House_factor" = house_factor)
}
return(norm_factor)
}
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
list("NEG_F(0)","NEG_G(0)")
factor_calculation <- function(rcc_content, housekeep, norm, ex_negs,sspe_negs){
if(norm == "GEO"){
geometric_mean_pos <- sapply(rcc_content, geometric, "Positive")
geometric_mean_neg <- sapply(rcc_content, geometric, "Negative")
positive_factor <- sapply(geometric_mean_pos,
function(x) mean(geometric_mean_pos) / x)
}else if(norm == "GLM"){
#glms <- sapply(rcc_content, intercept_slope, ex_negs)
glms<- mapply(intercept_slope, rcc_content, sspe_negs, MoreArgs = list(ex_negs))
geometric_mean_neg <- glms["intercept",]
slopes <- glms["slope",]
positive_factor <- sapply(slopes,
function(x) mean(slopes) / x)
}
if(housekeep == "predict"){
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg)
}else{
housecounts <- mapply(housekeeping,rcc_content, positive_factor,
geometric_mean_neg, housekeep)
housecounts <- as.data.frame(housecounts)
geometric_mean_house <- sapply(housecounts,
function(x) geoMean(x))
house_factor <- sapply(geometric_mean_house,
function(x) mean(geometric_mean_house) / x)
house_factor <- unname(house_factor)
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg,
"House_factor" = house_factor)
}
return(norm_factor)
}
list("NEG_F(0)","NEG_G(0)")
unlist(list("NEG_F(0)","NEG_G(0)"))
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
probes_out <- c("POS_F(0.125)", unlist(exc_negs),sspe)
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
factor_calculation <- function(rcc_content, housekeep, norm, ex_negs,sspe_negs){
if(norm == "GEO"){
geometric_mean_pos <- sapply(rcc_content, geometric, "Positive")
geometric_mean_neg <- sapply(rcc_content, geometric, "Negative")
positive_factor <- sapply(geometric_mean_pos,
function(x) mean(geometric_mean_pos) / x)
}else if(norm == "GLM"){
#glms <- sapply(rcc_content, intercept_slope, ex_negs)
glms<- mapply(intercept_slope, rcc_content, sspe_negs, MoreArgs = list(ex_negs))
geometric_mean_neg <- glms["intercept",]
slopes <- glms["slope",]
positive_factor <- sapply(slopes,
function(x) mean(slopes) / x)
}
if(housekeep == "predict"){
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg)
}else{
housecounts <- mapply(housekeeping,rcc_content, positive_factor,
geometric_mean_neg, housekeep)
housecounts <- as.data.frame(housecounts)
geometric_mean_house <- sapply(housecounts,
function(x) geoMean(x))
house_factor <- sapply(geometric_mean_house,
function(x) mean(geometric_mean_house) / x)
house_factor <- unname(house_factor)
norm_factor <- data.frame("Positive_factor" = positive_factor,
"Negative_factor" = geometric_mean_neg,
"House_factor" = house_factor)
}
return(norm_factor)
}
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
test <- summarize("Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession",my_housekeep,"GLM")
visualize(test)
normss <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
normal <- normss$normalized
sprednorm <- stack(as.data.frame(normal))
sprednorm$values <- ifelse(sprednorm$values == 0, NA, sprednorm$values)
sprednorm$date <- sapply(sprednorm$ind, function(x) ssheet[ssheet$Accession == as.character(x),"date"])
sprednorm.dens.plot <- ggplot(sprednorm, aes(x =log10(sprednorm[,"values"]+1))) +
stat_density(aes(group = ind, color = as.factor(date)),position="identity",geom="line") + labs(x="Log10(counts)",color="Date")
ggsave("predicted_miR_normalization.pdf", width = 8, height = 6)
sprednorm.dens.plot
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges() +facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
probes_out <- c("POS_F(0.125)", unlist(exc_negs))
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
intercept_slope <- function(rcc_content,sspe,exc_negs){
sspe <- names(sspe[sspe==1])
probes_out <- c("POS_F(0.125)", unlist(exc_negs))
counts <- rcc_content$Code_Summary
control_labels <- c("Positive","Negative")
control_data <- counts[counts$CodeClass %in% control_labels,]
control_data <- control_data[order(control_data$Name),]
control_data <- control_data[!control_data$Name %in% probes_out,]
prob_names <- paste0(control_data$Name,collapse = "")
y <- as.numeric(control_data$Count) + 1
x <- as.numeric(gsub("[\\(\\)]", "", regmatches(prob_names,
gregexpr("\\(.*?\\)", prob_names))[[1]]))
model <- glm(y~x, family = poisson(link = identity))
output <- c("intercept" = unname(model$coeff[1]),
"slope" = unname(model$coeff[2]))
return(output)
}
norms <- normalize(summary = test,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
test2 <- summarize("Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA",
"Z:/Roderick/Projects/Rhapsody/004 Omics/003 QC_Nanostring_miRNA/Samplesheet.csv",
"Accession",my_housekeep,"GLM")
norms2 <- normalize(summary = test2,housekeep = my_housekeep,remove.outliers = T,norm = "GLM")
normal <- norms2$normalized
sprednorm <- stack(as.data.frame(normal))
sprednorm$values <- ifelse(sprednorm$values == 0, NA, sprednorm$values)
sprednorm$date <- sapply(sprednorm$ind, function(x) ssheet[ssheet$Accession == as.character(x),"date"])
sprednorm.dens.plot <- ggplot(sprednorm, aes(x =log10(sprednorm[,"values"]+1))) +
stat_density(aes(group = ind, color = as.factor(date)),position="identity",geom="line") + labs(x="Log10(counts)",color="Date")
sprednorm.dens.plot
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges() +facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
normal <- normss$normalized
sprednorm <- stack(as.data.frame(normal))
sprednorm$values <- ifelse(sprednorm$values == 0, NA, sprednorm$values)
sprednorm$date <- sapply(sprednorm$ind, function(x) ssheet[ssheet$Accession == as.character(x),"date"])
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges(quantile_lines = T, vline_color="white") +
facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank())
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges(quantile_lines = T, vline_color="white") +
facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + labs(title="SSPE=T")
normal <- norms2$normalized
sprednorm <- stack(as.data.frame(normal))
sprednorm$values <- ifelse(sprednorm$values == 0, NA, sprednorm$values)
sprednorm$date <- sapply(sprednorm$ind, function(x) ssheet[ssheet$Accession == as.character(x),"date"])
ggplot(sprednorm, aes(x = sprednorm[,"values"],y = as.factor(ind), fill=as.factor(date))) +
geom_density_ridges(quantile_lines = T, vline_color="white") +
facet_wrap(~date, scales ="free_y",ncol = 6) +  scale_x_log10() +
theme(axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank()) + labs(title="SSPE=F")
